"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[792],{208:(n,t,e)=>{e.d(t,{A:()=>f});var o=e(354),r=e.n(o),a=e(314),i=e.n(a),A=e(417),c=e.n(A),s=new URL(e(416),e.b),d=new URL(e(553),e.b),l=i()(r()),u=c()(s),p=c()(d);l.push([n.id,`html {\n  --color: rgb(230, 252, 198);\n  --cancel: rgb(238, 150, 150);\n}\n\n@font-face {\n    font-family: 'Branda-yolq';\n    src: url(${u}) format('woff');\n    font-weight: 600;\n    font-style: normal;\n  }\n\n  @font-face {\n    font-family: 'Josefin-sans';\n    src: url(${p}) format('woff');\n    font-weight: 600;\n    font-style: normal;\n  }\n\n  iframe\n    {\n        display: none;\n    }\n\n  h1 {\n    font-family: 'Branda-yolq';\n    text-align: center;\n    font-size: 3rem;\n    padding-bottom: 10px;\n    border-bottom: 2px solid;\n  }\n\n  .container {\n    display: flex;\n    height: 85vh;\n  }\n  .container .navbar {\n    flex: 1;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  .container .navbar * {\n    text-align: center;\n  }\n \n  .container #content {\n    flex: 5;\n  }\n  .container nav {\n    font-family: 'Josefin-sans';\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    gap: 10px;\n    text-align: center;\n    padding: 0px 2vw;\n    border-right: 2px solid;\n    font-size: 2rem;\n    \n  }\n  .container nav button {\n    font-size: 1.5rem;\n    border-radius: 10px;\n    background-color: white;\n    padding: 5% 10%;\n    border-left: 0px;\n    border-right: 0px;\n    display: flex;\n    justify-content: space-between;\n    \n    align-items: center;\n  }\n  .container nav button:active {\n    background-color: yellow;\n  }\n  \n  \n\n  button img {\n    \n    height: 1.5em;\n  }\n\n  #projects-list {\n    display: flex;\n    flex-direction: column;\n    font-size: 1rem;\n    gap: 1rem;\n  }\n\n\n  #navform-submit, #navform-cancel {\n    width: 5rem;\n    height: 1rem;\n    font-size: 0.8rem;\n  }\n\n  #navform-submit {\n    background-color: var(--color);\n  }\n  #navform-cancel {\n    background-color: var(--cancel);\n  }\n\n  .button-div {\n    display: flex;\n    justify-content: space-between;\n  }\n  .projects form {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .projects div button {\n    width: 100%;\n    height: 2rem;\n    justify-content: center;\n    border: 1px solid;\n  }\n  .nav-input {\n    border: 2px solid;\n    border-radius: 5px;\n    height: 2rem;\n  }\n\n  .button-container {\n    border: 0px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .projects div button.project-name-button {\n    border: 0px;\n    flex: 3;\n  }\n  \n  .projects div button.del-button, .projects div button.edit-button{\n    border: 0px;\n    flex: 1;\n    width: 1rem;\n    padding: 0%;\n  }\n  /*  Content Page starts here*/\n#task-display {\n  display: flex;\n  flex-direction: column;\n}\n.task-container {\n  display: flex;\n  align-items: center;\n  height: auto;\n}\n.task-container > h3 {\n  flex: 1;\n  font-family: 'Josefin-sans', 'monospace';\n  font-size: larger;\n  padding: 0px 5%;\n}\n.task-container > p {\n  flex: 1;\n  font-family: 'monospace';\n}\n.task-container > div {\n  flex: 0.5;\n  height: auto;\n  width: 2rem;\n}\n.task-container > div button {\n  background-color: white;\n  border: 2px solid;\n  margin: 5%;\n  font-size: large;\n\n}\n#task-button-div .task-button {\n  width: 100%;\n  height: 3rem;\n  /* padding: 2vh 20px; */\n  background-color: rgb(231, 255, 193);\n  text-align: center;\n  padding: 4px 20px;\n  border: none;\n  border-radius: 10px;\n  cursor: pointer;\n  margin: 5px 0;\n  font-size: x-large;\n}\n#task-button-div .task-button:hover {\n  background-color: yellow;\n}\n\nform#myForm, form#edit-task-form {\n  display: flex; /* Arrange elements horizontally */\n  flex-direction: column; /* Stack elements vertically */\n  width: 80%; /* Adjust width as needed */\n  margin: 0 auto; /* Center the form horizontally */\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #ffffff;\n  justify-content: center;\n  align-items: center;\n}\n\nform#myForm label, form#edit-task-form label {\n  display: block; /* Make labels appear on separate lines */\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\nform#myForm input[type="text"],\nform#edit-task-form input[type="text"],\nform#myForm textarea,\nform#edit-task-form textarea,\nform#myForm input[type="date"],\nform#edit-task-form input[type="date"] {\n  width: 100%; /* Set width for input fields */\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  font-size: 16px;\n}\n\nform#myForm textarea {\n  height: 100px; /* Set height for textarea */\n}\n\nform#myForm button, form#edit-task-form button {\n  width: 70%;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-top: 15px;\n  background-color: var(--color);\n}\nform#myForm > :last-child, form#edit-task-form > :last-child {\n  background-color: var(--cancel);\n}\n\nform#myForm button:hover, form#edit-task-form button:hover {\n  background-color: #ffffff;\n  border: 1px solid;\n}\n\n\n\nform#myForm button[type="cancel"] {\n  background-color: #ccc; /* Gray for cancel */\n  color: black;\n}\n\n.strike-out {\n  text-decoration: line-through;\n}\n\n/* Star Shape Defined */\n.star-shape {\n  display: none; /* Hide the actual checkbox */\n  position: relative;\n}\n\n.star-shape + label {\n  display: inline-block;\n  cursor: pointer;\n  width: 30px; /* Adjust width and height for desired size */\n  height: 30px;\n  \n}\n\n.star-shape + label::after {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: gold; /* Adjust color as desired */\n  clip-path: polygon(\n    50% 0%,\n    61% 35%,\n    98% 35%,\n    67% 88%,\n    33% 88%,\n    0% 35%,\n    39% 35%\n  );\n}\n\n.star-shape:checked + label::after {\n  background-color: transparent; /* Transparent when checked */\n}\n\n.star-shape + label::before {\n  content: "";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #ccc; /* Adjust color as desired */\n  clip-path: polygon(\n    50% 0%,\n    61% 35%,\n    98% 35%,\n    67% 88%,\n    33% 88%,\n    0% 35%,\n    39% 35%\n  );\n}\n\n#content h2 {\n  font-size: 3rem;\n  font-family: 'Josefin-sans','Branda-yolq';\n  padding: 1rem 3rem;\n  /* background-color: var(--color); */\n}\n/* Boomark Page Hiden */\n#bookmarked{\n  display: none;\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["html {\n  --color: rgb(230, 252, 198);\n  --cancel: rgb(238, 150, 150);\n}\n\n@font-face {\n    font-family: 'Branda-yolq';\n    src: url('./Branda-yolq.woff') format('woff');\n    font-weight: 600;\n    font-style: normal;\n  }\n\n  @font-face {\n    font-family: 'Josefin-sans';\n    src: url('./Assets/Josefin_Sans/JosefinSans-VariableFont_wght.woff') format('woff');\n    font-weight: 600;\n    font-style: normal;\n  }\n\n  iframe\n    {\n        display: none;\n    }\n\n  h1 {\n    font-family: 'Branda-yolq';\n    text-align: center;\n    font-size: 3rem;\n    padding-bottom: 10px;\n    border-bottom: 2px solid;\n  }\n\n  .container {\n    display: flex;\n    height: 85vh;\n  }\n  .container .navbar {\n    flex: 1;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  .container .navbar * {\n    text-align: center;\n  }\n \n  .container #content {\n    flex: 5;\n  }\n  .container nav {\n    font-family: 'Josefin-sans';\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    gap: 10px;\n    text-align: center;\n    padding: 0px 2vw;\n    border-right: 2px solid;\n    font-size: 2rem;\n    \n  }\n  .container nav button {\n    font-size: 1.5rem;\n    border-radius: 10px;\n    background-color: white;\n    padding: 5% 10%;\n    border-left: 0px;\n    border-right: 0px;\n    display: flex;\n    justify-content: space-between;\n    \n    align-items: center;\n  }\n  .container nav button:active {\n    background-color: yellow;\n  }\n  \n  \n\n  button img {\n    \n    height: 1.5em;\n  }\n\n  #projects-list {\n    display: flex;\n    flex-direction: column;\n    font-size: 1rem;\n    gap: 1rem;\n  }\n\n\n  #navform-submit, #navform-cancel {\n    width: 5rem;\n    height: 1rem;\n    font-size: 0.8rem;\n  }\n\n  #navform-submit {\n    background-color: var(--color);\n  }\n  #navform-cancel {\n    background-color: var(--cancel);\n  }\n\n  .button-div {\n    display: flex;\n    justify-content: space-between;\n  }\n  .projects form {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .projects div button {\n    width: 100%;\n    height: 2rem;\n    justify-content: center;\n    border: 1px solid;\n  }\n  .nav-input {\n    border: 2px solid;\n    border-radius: 5px;\n    height: 2rem;\n  }\n\n  .button-container {\n    border: 0px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .projects div button.project-name-button {\n    border: 0px;\n    flex: 3;\n  }\n  \n  .projects div button.del-button, .projects div button.edit-button{\n    border: 0px;\n    flex: 1;\n    width: 1rem;\n    padding: 0%;\n  }\n  /*  Content Page starts here*/\n#task-display {\n  display: flex;\n  flex-direction: column;\n}\n.task-container {\n  display: flex;\n  align-items: center;\n  height: auto;\n}\n.task-container > h3 {\n  flex: 1;\n  font-family: 'Josefin-sans', 'monospace';\n  font-size: larger;\n  padding: 0px 5%;\n}\n.task-container > p {\n  flex: 1;\n  font-family: 'monospace';\n}\n.task-container > div {\n  flex: 0.5;\n  height: auto;\n  width: 2rem;\n}\n.task-container > div button {\n  background-color: white;\n  border: 2px solid;\n  margin: 5%;\n  font-size: large;\n\n}\n#task-button-div .task-button {\n  width: 100%;\n  height: 3rem;\n  /* padding: 2vh 20px; */\n  background-color: rgb(231, 255, 193);\n  text-align: center;\n  padding: 4px 20px;\n  border: none;\n  border-radius: 10px;\n  cursor: pointer;\n  margin: 5px 0;\n  font-size: x-large;\n}\n#task-button-div .task-button:hover {\n  background-color: yellow;\n}\n\nform#myForm, form#edit-task-form {\n  display: flex; /* Arrange elements horizontally */\n  flex-direction: column; /* Stack elements vertically */\n  width: 80%; /* Adjust width as needed */\n  margin: 0 auto; /* Center the form horizontally */\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #ffffff;\n  justify-content: center;\n  align-items: center;\n}\n\nform#myForm label, form#edit-task-form label {\n  display: block; /* Make labels appear on separate lines */\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\nform#myForm input[type=\"text\"],\nform#edit-task-form input[type=\"text\"],\nform#myForm textarea,\nform#edit-task-form textarea,\nform#myForm input[type=\"date\"],\nform#edit-task-form input[type=\"date\"] {\n  width: 100%; /* Set width for input fields */\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  font-size: 16px;\n}\n\nform#myForm textarea {\n  height: 100px; /* Set height for textarea */\n}\n\nform#myForm button, form#edit-task-form button {\n  width: 70%;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-top: 15px;\n  background-color: var(--color);\n}\nform#myForm > :last-child, form#edit-task-form > :last-child {\n  background-color: var(--cancel);\n}\n\nform#myForm button:hover, form#edit-task-form button:hover {\n  background-color: #ffffff;\n  border: 1px solid;\n}\n\n\n\nform#myForm button[type=\"cancel\"] {\n  background-color: #ccc; /* Gray for cancel */\n  color: black;\n}\n\n.strike-out {\n  text-decoration: line-through;\n}\n\n/* Star Shape Defined */\n.star-shape {\n  display: none; /* Hide the actual checkbox */\n  position: relative;\n}\n\n.star-shape + label {\n  display: inline-block;\n  cursor: pointer;\n  width: 30px; /* Adjust width and height for desired size */\n  height: 30px;\n  \n}\n\n.star-shape + label::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: gold; /* Adjust color as desired */\n  clip-path: polygon(\n    50% 0%,\n    61% 35%,\n    98% 35%,\n    67% 88%,\n    33% 88%,\n    0% 35%,\n    39% 35%\n  );\n}\n\n.star-shape:checked + label::after {\n  background-color: transparent; /* Transparent when checked */\n}\n\n.star-shape + label::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #ccc; /* Adjust color as desired */\n  clip-path: polygon(\n    50% 0%,\n    61% 35%,\n    98% 35%,\n    67% 88%,\n    33% 88%,\n    0% 35%,\n    39% 35%\n  );\n}\n\n#content h2 {\n  font-size: 3rem;\n  font-family: 'Josefin-sans','Branda-yolq';\n  padding: 1rem 3rem;\n  /* background-color: var(--color); */\n}\n/* Boomark Page Hiden */\n#bookmarked{\n  display: none;\n}"],sourceRoot:""}]);const f=l},314:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(i[c]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},417:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var a={},i=[],A=0;A<n.length;A++){var c=n[A],s=o.base?c[0]+o.base:c[0],d=a[s]||0,l="".concat(s," ").concat(d);a[s]=d+1;var u=e(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=r(p,o);o.byIndex=A,t.splice(A,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=e(a[i]);t[A].references--}for(var c=o(n,r),s=0;s<a.length;s++){var d=e(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},659:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},540:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},56:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},113:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},529:(n,t,e)=>{var o=e(72),r=e.n(o),a=e(825),i=e.n(a),A=e(659),c=e.n(A),s=e(56),d=e.n(s),l=e(540),u=e.n(l),p=e(113),f=e.n(p),m=e(208),E={};E.styleTagTransform=f(),E.setAttributes=d(),E.insert=c().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=u(),r()(m.A,E),m.A&&m.A.locals&&m.A.locals,e.p;const C=[];class B{constructor(n,t=!1){this.tasks=[],this.projectName=n,this.editForm=!1,this.home=t}deleteproject(n){C.forEach((function(t){if(t===n){const n=C.indexOf(t);n>-1&&C.splice(n,1)}}))}}class b{constructor(n,t,e,o=!1){this.taskName=n,this.taskDescription=t,this.dueDate=e,this.isComplete=o,this.editForm=!1,this.isDeleted=!1}removeTask(){C.forEach((function(n){n.tasks.forEach((function(t){if(t.isDeleted){const e=n.tasks.indexOf(t);e>-1&&n.tasks.splice(e,1)}}))}))}}const h=function(){localStorage.setItem("projectList",JSON.stringify(C))},g=document.getElementById("content"),k=function(){const n=function(o){for(h();g.firstChild;)g.removeChild(g.firstChild);const r=document.createElement("div");r.id="task-display";const a=document.createElement("div");a.id="task-button-div";const i=document.createElement("h2");i.textContent=o.projectName,g.append(r,a),g.insertBefore(i,g.firstChild),o.tasks.forEach((t=>{const a=document.createElement("div");r.append(a);const i=document.createElement("input");i.setAttribute("type","checkbox"),i.classList.add("task-checkbox"),t.isComplete&&(i.checked=!0),i.addEventListener("change",(function(){this.checked?(t.isComplete=!0,h()):t.isComplete=!1,n(o)}));const A=document.createElement("h3");A.textContent=t.taskName;const c=document.createElement("p");c.textContent=t.taskDescription;const s=document.createElement("p");s.textContent=t.dueDate,t.isComplete?(A.classList.add("strike-out"),c.classList.add("strike-out"),s.classList.add("strike-out")):(A.classList.remove("strike-out"),c.classList.remove("strike-out"),s.classList.remove("strike-out"));const d=document.createElement("div"),l=document.createElement("button");l.textContent="x",l.addEventListener("click",(function(){t.isDeleted=!0,t.removeTask();const e=o.tasks.indexOf(t);e>-1&&o.tasks.splice(e,1),n(o)}));const u=document.createElement("button");u.textContent="+",u.addEventListener("click",(function(){t.editForm=!0,n(o)}));const p=document.createElement("input");p.type="checkbox",p.classList.add("star-shape"),t.editForm?a.append(e(t,o)):(d.append(p,u,l),a.append(i,A,c,s,d)),a.classList.add("task-container")})),o.home||t(o)},t=function(t){const e=document.getElementById("task-button-div"),o=document.createElement("button");o.textContent="+ Add Task",o.classList.add("task-button"),e.append(o),o.addEventListener("click",(function(){!function(t){const e=document.createElement("form");e.id="myForm";const o=document.createElement("input");o.type="text",o.name="title",o.placeholder="Enter title (required)",o.required=!0;const r=document.createElement("textarea");r.name="description",r.placeholder="Enter description",r.setAttribute("required","");const a=document.createElement("input");a.type="date",a.name="date";const i=document.createElement("button");i.type="button",i.textContent="Submit",i.addEventListener("click",(function(){if(o.value&&a.value){const e=new b(o.value,r.value,a.value);t.tasks.push(e),localStorage.setItem("projectList",JSON.stringify(C)),n(t)}else{e.getElementsByTagName("p").length>0&&e.removeChild(e.getElementsByTagName("p")[0]);const n=document.createElement("p");n.textContent="*Please Enter Date And/Or Title",n.style.color="red",e.insertBefore(n,i)}}));const A=document.createElement("button");A.type="button",A.textContent="Cancel",A.addEventListener("click",(()=>{g.removeChild(e)})),e.appendChild(o),e.appendChild(r),e.appendChild(a),e.appendChild(i),e.appendChild(A),g.insertBefore(e,g.lastChild)}(t)}))},e=function(t,e){const o=document.createElement("form");o.id="edit-task-form";const r=document.createElement("input");r.type="text",r.name="title",r.value=t.taskName;const a=document.createElement("textarea");a.name="description",a.value=t.taskDescription;const i=document.createElement("input");i.type="date",i.name="date",i.value=t.dueDate;const A=document.createElement("button");A.type="button",A.textContent="Submit",A.addEventListener("click",(function(){t.taskName=r.value,t.taskDescription=a.value,t.dueDate=i.value,t.editForm=!1,n(e)}));const c=document.createElement("button");return c.type="button",c.textContent="Cancel",c.addEventListener("click",(()=>{t.editForm=!1,n(e)})),o.appendChild(r),o.appendChild(a),o.appendChild(i),o.appendChild(A),o.appendChild(c),o};return{projectIndividual:n}}(),x=document.getElementById("project-add"),y=document.getElementById("projects-list"),v={displaySidebar:function(){for(h();y.firstChild;)y.removeChild(y.firstChild);C.forEach((function(n){const t=document.createElement("div");t.classList.add("button-container");const e=document.createElement("button");e.textContent=n.projectName,e.classList.add("project-name-button");const o=document.createElement("button");o.classList.add("del-button"),o.textContent="x",o.addEventListener("click",(function(){n.deleteproject(n),v.displaySidebar()}));const r=document.createElement("button");if(r.textContent="+",r.classList.add("edit-button"),r.addEventListener("click",(function(){n.editForm=!0,v.displaySidebar()})),!1===n.editForm)t.append(e,r,o),e.textContent=n.projectName;else{const e=document.createElement("form"),o=document.createElement("div");o.classList.add("button-div");const r=document.createElement("input");r.value=n.projectName;const a=document.createElement("button");a.type="button",a.textContent="Update",a.setAttribute("type","button"),a.setAttribute("id","navform-submit"),r.setAttribute("class","nav-input");const i=document.createElement("button");i.textContent="Cancel",i.addEventListener("click",(function(){n.editForm=!1,v.formDisplay()})),i.setAttribute("type","button"),i.setAttribute("id","navform-cancel"),o.append(a,i),e.append(r,o),t.append(e),a.addEventListener("click",(function(){n.projectName=r.value,n.editForm=!1,k.projectIndividual(n),v.displaySidebar()}))}e.addEventListener("click",(function(){k.projectIndividual(n)})),n.projectName&&y.append(t)}))},formDisplay:function(){const n=document.createElement("form"),t=document.createElement("div");t.classList.add("button-div");const e=document.createElement("input"),o=document.createElement("button");o.type="button",o.textContent="Submit",o.setAttribute("type","button"),o.setAttribute("id","navform-submit"),e.setAttribute("placeholder","Project Name"),e.setAttribute("class","nav-input");const r=document.createElement("button");r.textContent="Cancel",r.setAttribute("type","button"),r.setAttribute("id","navform-cancel"),t.append(o),t.append(r),n.append(e),n.append(t),y.append(n),o.addEventListener("click",(function(){if(e.value){const n=new B;n.projectName=e.value,C.push(n),v.displaySidebar()}})),r.addEventListener("click",(function(){y.removeChild(n)}))}};function w(n){return function(n,t){return n instanceof Date?new n.constructor(t):new Date(t)}(n,Date.now())}function I(n){const t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new n.constructor(+n):"number"==typeof n||"[object Number]"===t||"string"==typeof n||"[object String]"===t?new Date(n):new Date(NaN)}function j(n){const t=I(n);return t.setHours(0,0,0,0),t}function S(n){return t=n,e=w(n),+j(t)==+j(e);var t,e}let D={};function L(){return D}function F(n,t){const e=L(),o=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??e.weekStartsOn??e.locale?.options?.weekStartsOn??0,r=I(n),a=r.getDay(),i=(a<o?7:0)+a-o;return r.setDate(r.getDate()-i),r.setHours(0,0,0,0),r}function O(n,t){const e=L(),o=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??e.weekStartsOn??e.locale?.options?.weekStartsOn??0,r=I(n),a=r.getDay(),i=6+(a<o?-7:0)-(a-o);return r.setDate(r.getDate()+i),r.setHours(23,59,59,999),r}const z=document.getElementById("all-tasks"),W=document.getElementById("today"),N=document.getElementById("this-week"),T=new B("Today's Task",!0),Y=new B("All Task's",!0),M=new B("This Week's Task",!0),J=function(){P.empty(M),C.forEach((function(n){n.tasks.forEach((function(n){(function(n,t){const e=+I(n),[o,r]=[+I(t.start),+I(t.end)].sort(((n,t)=>n-t));return e>=o&&e<=r})(new Date(n.dueDate),{start:F(new Date),end:O(new Date)})&&M.tasks.push(n)}))}))},P={empty:function(n){for(;n.tasks.length>0;)n.tasks.pop()}};x.addEventListener("click",(function(){v.formDisplay()})),window.addEventListener("load",(function(){localStorage.getItem("projectList")&&(JSON.parse(localStorage.getItem("projectList")).forEach((n=>{const t=new B(n.projectName);n.tasks.forEach((n=>{const e=new b(n.taskName,n.taskDescription,n.dueDate,n.isComplete);t.tasks.push(e)})),C.push(t)})),v.displaySidebar())})),W.addEventListener("click",(function(){P.empty(T),C.forEach((function(n){n.tasks.forEach((function(n){S(n.dueDate)&&T.tasks.push(n)}))})),k.projectIndividual(T)})),z.addEventListener("click",(function(){P.empty(Y),C.forEach((function(n){n.tasks.forEach((function(n){Y.tasks.push(n)}))})),k.projectIndividual(Y)})),N.addEventListener("click",(function(){J(),k.projectIndividual(M)}))},553:(n,t,e)=>{n.exports=e.p+"613585db06f849ca7717.woff"},416:(n,t,e)=>{n.exports=e.p+"4810017209445a1fa312.woff"}},n=>{n(n.s=529)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,